apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: argo3-cosmo-aggregate-wft
  namespace: {{ .Values.namespace }}
spec:
  entrypoint: aggregate-pipeline
  artifactRepositoryRef:
    configMap: cosmogony-artifact-repository
    key: minio
  templates:
  - name: aggregate-pipeline
    steps:
    - - name: substep1
        template: step1
    - - name: substep2
        template: step2
        arguments:
          artifacts:
          - name: cosmo-file
            from: "{{ "{{" }}steps.substep1.outputs.artifacts.cosmo-file{{ "}}" }}"
  - name: step1
    inputs:
      artifacts:
      - name: objects
        path: /s3
        s3:
          endpoint: {{ .Values.minio.endpoint }}
          insecure: true
          bucket: {{ .Values.minio.cosmogonyPath }}
          key: cosmogony-data/parts
          accessKeySecret:
            name: my-minio-cred
            key: accesskey
          secretKeySecret:
            name: my-minio-cred
            key: secretkey
    outputs:
      artifacts:
      - name: cosmo-file
        path: /cosmo.jsonl.gz
    script:
      image: {{ .Values.cosmogony.image.repository }}
      imagePullPolicy: {{ .Values.cosmogony.image.pullPolicy}}
      command: ["/bin/sh"]
      source: |
        cosmogony merge  /s3/*.jsonl.gz --output /cosmo.jsonl.gz
  - name: step2
    inputs:
      artifacts:
      - name: cosmo-file
        path: /cosmo.jsonl.gz
    script:
      image: minio/mc:latest
      command: ["/bin/sh"]
      source: |
        echo "start of script"
        /usr/bin/mc config host add myminio {{ .Values.minio.scheme }}://{{ .Values.minio.endpoint }} {{ .Values.minio.accessKey }} {{ .Values.minio.secretKey }}
        cd /
        mc cp /cosmo.jsonl.gz myminio/{{ .Values.minio.cosmogonyPath }}/cosmogony-data/concat/cosmogony.jsonl.gz
        echo "Finished"


